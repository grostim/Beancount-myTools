versions pytest-5.1.1, py-1.8.0, python-3.7.3.final.0
cwd=/myData/myTools
args=['--debug', '--generate']

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f574790fa58>
    pytest_plugin_registered [hook]
        plugin: <Session myTools exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f574790fa58>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f5746ddf048>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f5746dd3c88>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f5746ddf278>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: py._io [assertion]
    early skip of rewriting module: py._io.terminalwriter [assertion]
    early skip of rewriting module: unicodedata [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f574790fa58>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.7/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.7/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.7/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.7/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.7/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.7/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.7/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.7/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.7/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.7/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.7/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.7/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.7/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.7/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.7/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.7/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.7/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.7/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/usr/local/lib/python3.7/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.7/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.7/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.7/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.7/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.7/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/local/lib/python3.7/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.7/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.7/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/local/lib/python3.7/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/local/lib/python3.7/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended'> err=<FDCapture 2 oldfd=6 _state='suspended'> in_=<FDCapture 0 oldfd=3 _state='started'> _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from '/myData/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'beancount.ingest.regression_pytest' from '/usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'myTools.conftest' from '/myData/myTools/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f5746ddf048>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f5746dd3c88>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f5746ddf278>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f5746ddf4e0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f5746deecf8>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f574790fa58>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.7/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.7/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.7/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.7/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.7/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.7/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.7/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.7/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.7/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.7/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.7/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.7/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.7/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.7/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.7/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.7/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.7/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.7/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/usr/local/lib/python3.7/site-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.7/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.7/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.7/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.7/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.7/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/local/lib/python3.7/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.7/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.7/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/local/lib/python3.7/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/local/lib/python3.7/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended'> err=<FDCapture 2 oldfd=6 _state='suspended'> in_=<FDCapture 0 oldfd=3 _state='started'> _state='suspended' _in_suspended='<UNSET>'> _current_item=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from '/myData/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'beancount.ingest.regression_pytest' from '/usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'myTools.conftest' from '/myData/myTools/conftest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f5746ddf048>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f5746dd3c88>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f5746ddf278>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f5746ddf4e0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f5746deecf8>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f5746deee80>
          manager: <_pytest.config.PytestPluginManager object at 0x7f574870bd68>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f574790fa58>
          startdir: /myData/myTools
      finish pytest_report_header --> [['rootdir: /myData/myTools'], ['using: pytest-5.1.1 pylib-1.8.0']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['/myData/myTools'] [collection]
        pytest_collectstart [hook]
            collector: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument /myData/myTools [collection]
            pytest_ignore_collect [hook]
                path: /myData/myTools/__init__.py
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /myData/myTools/__init__.py
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /myData/myTools/__init__.py
                  parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /myData/myTools> [hook]
            finish pytest_collect_file --> [<Package /myData/myTools>] [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/jsongenerali
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
          early skip of rewriting module: py._code [assertion]
          early skip of rewriting module: py._code.code [assertion]
          early skip of rewriting module: repr [assertion]
            pytest_collect_directory [hook]
                path: /myData/myTools/jsongenerali
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/pdfbourso
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /myData/myTools/pdfbourso
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/.pytest_cache
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/pdfamex
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /myData/myTools/pdfamex
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/QIF
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_directory [hook]
                path: /myData/myTools/QIF
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> None [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/__init__.py
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /myData/myTools/__init__.py
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /myData/myTools/__init__.py
                  parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /myData/myTools> [hook]
            finish pytest_collect_file --> [<Package /myData/myTools>] [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/QIF/__init__.py
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /myData/myTools/QIF/__init__.py
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /myData/myTools/QIF/__init__.py
                  parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /myData/myTools/QIF> [hook]
            finish pytest_collect_file --> [<Package /myData/myTools/QIF>] [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/jsongenerali/__init__.py
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /myData/myTools/jsongenerali/__init__.py
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /myData/myTools/jsongenerali/__init__.py
                  parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /myData/myTools/jsongenerali> [hook]
            finish pytest_collect_file --> [<Package /myData/myTools/jsongenerali>] [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/pdfamex/__init__.py
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /myData/myTools/pdfamex/__init__.py
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /myData/myTools/pdfamex/__init__.py
                  parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /myData/myTools/pdfamex> [hook]
            finish pytest_collect_file --> [<Package /myData/myTools/pdfamex>] [hook]
            pytest_ignore_collect [hook]
                path: /myData/myTools/pdfbourso/__init__.py
                config: <_pytest.config.Config object at 0x7f574790fa58>
            finish pytest_ignore_collect --> False [hook]
            pytest_collect_file [hook]
                path: /myData/myTools/pdfbourso/__init__.py
                parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /myData/myTools/pdfbourso/__init__.py
                  parent: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /myData/myTools/pdfbourso> [hook]
            finish pytest_collect_file --> [<Package /myData/myTools/pdfbourso>] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=5 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=5 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package /myData/myTools> [collection]
      pytest_collectstart [hook]
          collector: <Package /myData/myTools>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package /myData/myTools>
        pytest_ignore_collect [hook]
            path: /myData/myTools/jsongenerali
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_directory [hook]
            path: /myData/myTools/jsongenerali
            parent: <Package /myData/myTools>
        finish pytest_collect_directory --> None [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/pdfbourso
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_directory [hook]
            path: /myData/myTools/pdfbourso
            parent: <Package /myData/myTools>
        finish pytest_collect_directory --> None [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/.pytest_cache
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/pdfamex
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_directory [hook]
            path: /myData/myTools/pdfamex
            parent: <Package /myData/myTools>
        finish pytest_collect_directory --> None [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/QIF
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_directory [hook]
            path: /myData/myTools/QIF
            parent: <Package /myData/myTools>
        finish pytest_collect_directory --> None [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/.git
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/.git
            parent: <Package /myData/myTools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/.gitignore
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/.gitignore
            parent: <Package /myData/myTools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/README.md
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/README.md
            parent: <Package /myData/myTools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/conftest.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/conftest.py
            parent: <Package /myData/myTools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/generali.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/generali.py
            parent: <Package /myData/myTools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/myutils.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/myutils.py
            parent: <Package /myData/myTools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/pytestdebug.log
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/pytestdebug.log
            parent: <Package /myData/myTools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/QIF/__init__.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/jsongenerali/__init__.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/pdfamex/__init__.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/pdfbourso/__init__.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
      finish pytest_make_collect_report --> <CollectReport '__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport '__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package /myData/myTools/QIF> [collection]
      pytest_collectstart [hook]
          collector: <Package /myData/myTools/QIF>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package /myData/myTools/QIF>
        pytest_ignore_collect [hook]
            path: /myData/myTools/QIF/ImporterQIF.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/QIF/ImporterQIF.py
            parent: <Package /myData/myTools/QIF>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/QIF/ImporterQIF_test.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/QIF/ImporterQIF_test.py
            parent: <Package /myData/myTools/QIF>
          pytest_pycollect_makemodule [hook]
              path: /myData/myTools/QIF/ImporterQIF_test.py
              parent: <Package /myData/myTools/QIF>
          finish pytest_pycollect_makemodule --> <Module ImporterQIF_test.py> [hook]
        finish pytest_collect_file --> [<Module ImporterQIF_test.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'QIF/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module ImporterQIF_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module ImporterQIF_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module ImporterQIF_test.py>
      early skip of rewriting module: myTools.QIF [assertion]
      find_module called for: myTools.QIF.ImporterQIF_test [assertion]
      matched test file '/myData/myTools/QIF/ImporterQIF_test.py' [assertion]
      found cached rewritten pyc for '/myData/myTools/QIF/ImporterQIF_test.py' [assertion]
      early skip of rewriting module: myTools.QIF.ImporterQIF [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __name__
            obj: myTools.QIF.ImporterQIF_test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __doc__
            obj: Unit tests for QIF importer (using pytest).
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __package__
            obj: myTools.QIF
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f5747615e48>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __spec__
            obj: ModuleSpec(name='myTools.QIF.ImporterQIF_test', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f5747615e48>, origin='/myData/myTools/QIF/ImporterQIF_test.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __file__
            obj: /myData/myTools/QIF/ImporterQIF_test.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __cached__
            obj: /myData/myTools/QIF/__pycache__/ImporterQIF_test.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __copyright__
            obj: Copyright (C) 2018  Martin Blais - slightly modified by Grostim
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __license__
            obj: GNU GPLv2
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: path
            obj: <module 'posixpath' from '/usr/local/lib/python3.7/posixpath.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.7/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: regtest
            obj: <module 'beancount.ingest.regression_pytest' from '/usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: ImporterQIF
            obj: <module 'myTools.QIF.ImporterQIF' from '/myData/myTools/QIF/ImporterQIF.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: ACCOUNTLIST
            obj: {'00040754305': 'Actif:Boursorama:CCJoint'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: IMPORTER
            obj: myTools.QIF.ImporterQIF.ImporterQIF
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: TestImporter
            obj: <class 'myTools.QIF.ImporterQIF_test.TestImporter'>
        finish pytest_pycollect_makeitem --> <Class TestImporter> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f574d6c5f40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ImporterQIF_test.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'QIF/ImporterQIF_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestImporter> [collection]
      pytest_collectstart [hook]
          collector: <Class TestImporter>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestImporter>
      finish pytest_make_collect_report --> <CollectReport 'QIF/ImporterQIF_test.py::TestImporter' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __module__
            obj: myTools.QIF.ImporterQIF_test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='parametrize', args=('file', []), kwargs={}), Mark(name='parametrize', args=('importer', [<myTools.QIF.ImporterQIF.ImporterQIF object at 0x7f5746da7ba8>]), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_identify
            obj: <function ImporterTestBase.test_identify at 0x7f5746dd16a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f5746a31358>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.QIF.ImporterQIF.ImporterQIF
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_identify[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_extract
            obj: <function ImporterTestBase.test_extract at 0x7f5746dd1730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f5746a31780>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.QIF.ImporterQIF.ImporterQIF
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_date
            obj: <function ImporterTestBase.test_file_date at 0x7f5746dd17b8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f5746a31b38>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.QIF.ImporterQIF.ImporterQIF
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_date[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_name
            obj: <function ImporterTestBase.test_file_name at 0x7f5746dd1840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f5746a31ef0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.QIF.ImporterQIF.ImporterQIF
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_name[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_account
            obj: <function ImporterTestBase.test_file_account at 0x7f5746dd18c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f5746a4e2e8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.QIF.ImporterQIF.ImporterQIF
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_account[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __dict__
            obj: <attribute '__dict__' of 'ImporterTestBase' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __weakref__
            obj: <attribute '__weakref__' of 'ImporterTestBase' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f574d6cd880>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'QIF/ImporterQIF_test.py::TestImporter' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_identify[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_identify[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_date[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_date[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_name[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_name[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_account[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_account[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'QIF/ImporterQIF_test.py::TestImporter' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'QIF/ImporterQIF_test.py::TestImporter' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'QIF/ImporterQIF_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'QIF/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package /myData/myTools/jsongenerali> [collection]
      pytest_collectstart [hook]
          collector: <Package /myData/myTools/jsongenerali>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package /myData/myTools/jsongenerali>
        pytest_ignore_collect [hook]
            path: /myData/myTools/jsongenerali/jsongenerali.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/jsongenerali/jsongenerali.py
            parent: <Package /myData/myTools/jsongenerali>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/jsongenerali/jsongenerali_test.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/jsongenerali/jsongenerali_test.py
            parent: <Package /myData/myTools/jsongenerali>
          pytest_pycollect_makemodule [hook]
              path: /myData/myTools/jsongenerali/jsongenerali_test.py
              parent: <Package /myData/myTools/jsongenerali>
          finish pytest_pycollect_makemodule --> <Module jsongenerali_test.py> [hook]
        finish pytest_collect_file --> [<Module jsongenerali_test.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'jsongenerali/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module jsongenerali_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module jsongenerali_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module jsongenerali_test.py>
      early skip of rewriting module: myTools.jsongenerali [assertion]
      find_module called for: myTools.jsongenerali.jsongenerali_test [assertion]
      matched test file '/myData/myTools/jsongenerali/jsongenerali_test.py' [assertion]
      found cached rewritten pyc for '/myData/myTools/jsongenerali/jsongenerali_test.py' [assertion]
      early skip of rewriting module: myTools.jsongenerali.jsongenerali [assertion]
      early skip of rewriting module: dateutil [assertion]
      early skip of rewriting module: dateutil._version [assertion]
      early skip of rewriting module: dateutil.parser [assertion]
      early skip of rewriting module: dateutil.parser._parser [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: dateutil.relativedelta [assertion]
      early skip of rewriting module: dateutil._common [assertion]
      early skip of rewriting module: dateutil.tz [assertion]
      early skip of rewriting module: dateutil.tz.tz [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: dateutil.tz._common [assertion]
      early skip of rewriting module: dateutil.tz._factories [assertion]
      early skip of rewriting module: dateutil.tz.win [assertion]
      early skip of rewriting module: six.moves.winreg [assertion]
      early skip of rewriting module: contextmanager [assertion]
      early skip of rewriting module: dateutil.parser.isoparser [assertion]
      early skip of rewriting module: importers [assertion]
      early skip of rewriting module: importers.myutils [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __name__
            obj: myTools.jsongenerali.jsongenerali_test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __doc__
            obj: Unit tests for jsongenerali importer (using pytest).
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __package__
            obj: myTools.jsongenerali
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f5747615e48>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __spec__
            obj: ModuleSpec(name='myTools.jsongenerali.jsongenerali_test', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f5747615e48>, origin='/myData/myTools/jsongenerali/jsongenerali_test.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __file__
            obj: /myData/myTools/jsongenerali/jsongenerali_test.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __cached__
            obj: /myData/myTools/jsongenerali/__pycache__/jsongenerali_test.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __copyright__
            obj: Copyright (C) 2018  Martin Blais - slightly modified by Grostim
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __license__
            obj: GNU GPLv2
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: path
            obj: <module 'posixpath' from '/usr/local/lib/python3.7/posixpath.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.7/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: regtest
            obj: <module 'beancount.ingest.regression_pytest' from '/usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: jsongenerali
            obj: <module 'myTools.jsongenerali.jsongenerali' from '/myData/myTools/jsongenerali/jsongenerali.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: ACCOUNTLIST
            obj: {'00040754305': 'Actif:Boursorama:CCJoint', '00040132901': 'Actif:Boursorama:CCTim', '00040239557': 'Actif:Boursorama:CCAnna', '10014570396': 'Passif:Boursorama:CBJoint', '4979********1979': 'Passif:Boursorama:CBJoint', '10014935408': 'Passif:Boursorama:CBTim', '4979********1974': 'Passif:Boursorama:CBTim', 'xxxx-xxxxxx-72001': 'Passif:AirFrance:Amex', '00030305440': 'Actif:Boursorama:CELAnna', '00031305390': 'Actif:Boursorama:PELAnna', '00020871896': 'Actif:Boursorama:LDDAnna', '00020132893': 'Actif:Boursorama:LDDAnna', 'P54112927': 'Actif:Linxea:AVTim1'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: IMPORTER
            obj: myTools.jsongenerali.jsongenerali.jsongenerali
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: TestImporter
            obj: <class 'myTools.jsongenerali.jsongenerali_test.TestImporter'>
        finish pytest_pycollect_makeitem --> <Class TestImporter> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f574d6c5f40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module jsongenerali_test.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'jsongenerali/jsongenerali_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestImporter> [collection]
      pytest_collectstart [hook]
          collector: <Class TestImporter>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestImporter>
      finish pytest_make_collect_report --> <CollectReport 'jsongenerali/jsongenerali_test.py::TestImporter' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __module__
            obj: myTools.jsongenerali.jsongenerali_test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='parametrize', args=('file', []), kwargs={}), Mark(name='parametrize', args=('importer', [<myTools.jsongenerali.jsongenerali.jsongenerali object at 0x7f5746a4e978>]), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_identify
            obj: <function ImporterTestBase.test_identify at 0x7f5746dd16a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469c10b8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.jsongenerali.jsongenerali.jsongenerali
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_identify[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_extract
            obj: <function ImporterTestBase.test_extract at 0x7f5746dd1730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469c1358>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.jsongenerali.jsongenerali.jsongenerali
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_date
            obj: <function ImporterTestBase.test_file_date at 0x7f5746dd17b8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469c16d8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.jsongenerali.jsongenerali.jsongenerali
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_date[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_name
            obj: <function ImporterTestBase.test_file_name at 0x7f5746dd1840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469c1a58>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.jsongenerali.jsongenerali.jsongenerali
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_name[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_account
            obj: <function ImporterTestBase.test_file_account at 0x7f5746dd18c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469c1dd8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.jsongenerali.jsongenerali.jsongenerali
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_account[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __dict__
            obj: <attribute '__dict__' of 'ImporterTestBase' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __weakref__
            obj: <attribute '__weakref__' of 'ImporterTestBase' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f574d6cd880>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'jsongenerali/jsongenerali_test.py::TestImporter' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_identify[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_identify[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_date[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_date[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_name[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_name[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_account[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_account[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'jsongenerali/jsongenerali_test.py::TestImporter' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'jsongenerali/jsongenerali_test.py::TestImporter' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'jsongenerali/jsongenerali_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'jsongenerali/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package /myData/myTools/pdfamex> [collection]
      pytest_collectstart [hook]
          collector: <Package /myData/myTools/pdfamex>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package /myData/myTools/pdfamex>
        pytest_ignore_collect [hook]
            path: /myData/myTools/pdfamex/pdfamex.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/pdfamex/pdfamex.py
            parent: <Package /myData/myTools/pdfamex>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/pdfamex/pdfamex_test.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/pdfamex/pdfamex_test.py
            parent: <Package /myData/myTools/pdfamex>
          pytest_pycollect_makemodule [hook]
              path: /myData/myTools/pdfamex/pdfamex_test.py
              parent: <Package /myData/myTools/pdfamex>
          finish pytest_pycollect_makemodule --> <Module pdfamex_test.py> [hook]
        finish pytest_collect_file --> [<Module pdfamex_test.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pdfamex/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module pdfamex_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module pdfamex_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module pdfamex_test.py>
      early skip of rewriting module: myTools.pdfamex [assertion]
      find_module called for: myTools.pdfamex.pdfamex_test [assertion]
      matched test file '/myData/myTools/pdfamex/pdfamex_test.py' [assertion]
      found cached rewritten pyc for '/myData/myTools/pdfamex/pdfamex_test.py' [assertion]
      early skip of rewriting module: myTools.pdfamex.pdfamex [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __name__
            obj: myTools.pdfamex.pdfamex_test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __doc__
            obj: Unit tests for pdfamex importer (using pytest).
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __package__
            obj: myTools.pdfamex
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f5747615e48>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __spec__
            obj: ModuleSpec(name='myTools.pdfamex.pdfamex_test', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f5747615e48>, origin='/myData/myTools/pdfamex/pdfamex_test.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __file__
            obj: /myData/myTools/pdfamex/pdfamex_test.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __cached__
            obj: /myData/myTools/pdfamex/__pycache__/pdfamex_test.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __copyright__
            obj: Copyright (C) 2018  Martin Blais - slightly modified by Grostim
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __license__
            obj: GNU GPLv2
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: path
            obj: <module 'posixpath' from '/usr/local/lib/python3.7/posixpath.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.7/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: regtest
            obj: <module 'beancount.ingest.regression_pytest' from '/usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: pdfamex
            obj: <module 'myTools.pdfamex.pdfamex' from '/myData/myTools/pdfamex/pdfamex.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: ACCOUNTLIST
            obj: {'00040754305': 'Actif:Boursorama:CCJoint', '00040132901': 'Actif:Boursorama:CCTim', '00040239557': 'Actif:Boursorama:CCAnna', '10014570396': 'Passif:Boursorama:CBJoint', '4979********1979': 'Passif:Boursorama:CBJoint', '10014935408': 'Passif:Boursorama:CBTim', '4979********1974': 'Passif:Boursorama:CBTim', 'xxxx-xxxxxx-72001': 'Passif:AirFrance:Amex'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: IMPORTER
            obj: myTools.pdfamex.pdfamex.pdfamex
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: TestImporter
            obj: <class 'myTools.pdfamex.pdfamex_test.TestImporter'>
        finish pytest_pycollect_makeitem --> <Class TestImporter> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f574d6c5f40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfamex_test.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pdfamex/pdfamex_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestImporter> [collection]
      pytest_collectstart [hook]
          collector: <Class TestImporter>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestImporter>
      finish pytest_make_collect_report --> <CollectReport 'pdfamex/pdfamex_test.py::TestImporter' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __module__
            obj: myTools.pdfamex.pdfamex_test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='parametrize', args=('file', []), kwargs={}), Mark(name='parametrize', args=('importer', [<myTools.pdfamex.pdfamex.pdfamex object at 0x7f57469d1208>]), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_identify
            obj: <function ImporterTestBase.test_identify at 0x7f5746dd16a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469d19e8>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfamex.pdfamex.pdfamex
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_identify[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_extract
            obj: <function ImporterTestBase.test_extract at 0x7f5746dd1730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469d1c88>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfamex.pdfamex.pdfamex
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_date
            obj: <function ImporterTestBase.test_file_date at 0x7f5746dd17b8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469dd0f0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfamex.pdfamex.pdfamex
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_date[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_name
            obj: <function ImporterTestBase.test_file_name at 0x7f5746dd1840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469dd438>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfamex.pdfamex.pdfamex
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_name[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_account
            obj: <function ImporterTestBase.test_file_account at 0x7f5746dd18c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469dd7f0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfamex.pdfamex.pdfamex
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_account[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __dict__
            obj: <attribute '__dict__' of 'ImporterTestBase' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __weakref__
            obj: <attribute '__weakref__' of 'ImporterTestBase' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f574d6cd880>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pdfamex/pdfamex_test.py::TestImporter' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_identify[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_identify[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_date[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_date[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_name[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_name[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_account[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_account[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pdfamex/pdfamex_test.py::TestImporter' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pdfamex/pdfamex_test.py::TestImporter' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pdfamex/pdfamex_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pdfamex/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package /myData/myTools/pdfbourso> [collection]
      pytest_collectstart [hook]
          collector: <Package /myData/myTools/pdfbourso>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package /myData/myTools/pdfbourso>
        pytest_ignore_collect [hook]
            path: /myData/myTools/pdfbourso/pdfbourso.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/pdfbourso/pdfbourso.py
            parent: <Package /myData/myTools/pdfbourso>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /myData/myTools/pdfbourso/pdfbourso_test.py
            config: <_pytest.config.Config object at 0x7f574790fa58>
        finish pytest_ignore_collect --> False [hook]
        pytest_collect_file [hook]
            path: /myData/myTools/pdfbourso/pdfbourso_test.py
            parent: <Package /myData/myTools/pdfbourso>
          pytest_pycollect_makemodule [hook]
              path: /myData/myTools/pdfbourso/pdfbourso_test.py
              parent: <Package /myData/myTools/pdfbourso>
          finish pytest_pycollect_makemodule --> <Module pdfbourso_test.py> [hook]
        finish pytest_collect_file --> [<Module pdfbourso_test.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pdfbourso/__init__.py' lenresult=1 outcome='passed'> [hook]
    genitems <Module pdfbourso_test.py> [collection]
      pytest_collectstart [hook]
          collector: <Module pdfbourso_test.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module pdfbourso_test.py>
      early skip of rewriting module: myTools.pdfbourso [assertion]
      find_module called for: myTools.pdfbourso.pdfbourso_test [assertion]
      matched test file '/myData/myTools/pdfbourso/pdfbourso_test.py' [assertion]
      found cached rewritten pyc for '/myData/myTools/pdfbourso/pdfbourso_test.py' [assertion]
      early skip of rewriting module: myTools.pdfbourso.pdfbourso [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __name__
            obj: myTools.pdfbourso.pdfbourso_test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __doc__
            obj: Unit tests for pdfamex importer (using pytest).
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __package__
            obj: myTools.pdfbourso
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f5747615e48>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __spec__
            obj: ModuleSpec(name='myTools.pdfbourso.pdfbourso_test', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f5747615e48>, origin='/myData/myTools/pdfbourso/pdfbourso_test.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __file__
            obj: /myData/myTools/pdfbourso/pdfbourso_test.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __cached__
            obj: /myData/myTools/pdfbourso/__pycache__/pdfbourso_test.cpython-37.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.7/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __copyright__
            obj: Copyright (C) 2018  Martin Blais - slightly modified by Grostim
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __license__
            obj: GNU GPLv2
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: path
            obj: <module 'posixpath' from '/usr/local/lib/python3.7/posixpath.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.7/site-packages/pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: regtest
            obj: <module 'beancount.ingest.regression_pytest' from '/usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: pdfbourso
            obj: <module 'myTools.pdfbourso.pdfbourso' from '/myData/myTools/pdfbourso/pdfbourso.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: ACCOUNTLIST
            obj: {'00040754305': 'Actif:Boursorama:CCJoint', '00040132901': 'Actif:Boursorama:CCTim', '00040239557': 'Actif:Boursorama:CCAnna', '10014570396': 'Passif:Boursorama:CBJoint', '4979********1979': 'Passif:Boursorama:CBJoint', '10014935408': 'Passif:Boursorama:CBTim', '4979********1974': 'Passif:Boursorama:CBTim', 'xxxx-xxxxxx-72001': 'Passif:AirFrance:Amex', '00030305440': 'Actif:Boursorama:CELAnna', '00031305390': 'Actif:Boursorama:PELAnna', '00020871896': 'Actif:Boursorama:LDDAnna', '00020132893': 'Actif:Boursorama:LDDAnna'}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: IMPORTER
            obj: myTools.pdfbourso.pdfbourso.pdfbourso
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: TestImporter
            obj: <class 'myTools.pdfbourso.pdfbourso_test.TestImporter'>
        finish pytest_pycollect_makeitem --> <Class TestImporter> [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f574d6c5f40>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module pdfbourso_test.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pdfbourso/pdfbourso_test.py' lenresult=1 outcome='passed'> [hook]
    genitems <Class TestImporter> [collection]
      pytest_collectstart [hook]
          collector: <Class TestImporter>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Class TestImporter>
      finish pytest_make_collect_report --> <CollectReport 'pdfbourso/pdfbourso_test.py::TestImporter' lenresult=1 outcome='passed'> [hook]
    genitems <Instance ()> [collection]
      pytest_collectstart [hook]
          collector: <Instance ()>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Instance ()>
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __module__
            obj: myTools.pdfbourso.pdfbourso_test
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __doc__
            obj: None
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: pytestmark
            obj: [Mark(name='parametrize', args=('file', []), kwargs={}), Mark(name='parametrize', args=('importer', [<myTools.pdfbourso.pdfbourso.pdfbourso object at 0x7f57469dde80>]), kwargs={})]
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_identify
            obj: <function ImporterTestBase.test_identify at 0x7f5746dd16a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469ea390>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfbourso.pdfbourso.pdfbourso
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_identify[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_extract
            obj: <function ImporterTestBase.test_extract at 0x7f5746dd1730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469ea630>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfbourso.pdfbourso.pdfbourso
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_date
            obj: <function ImporterTestBase.test_file_date at 0x7f5746dd17b8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469ea9b0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfbourso.pdfbourso.pdfbourso
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_date[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_name
            obj: <function ImporterTestBase.test_file_name at 0x7f5746dd1840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469ead30>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfbourso.pdfbourso.pdfbourso
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_name[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: test_file_account
            obj: <function ImporterTestBase.test_file_account at 0x7f5746dd18c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f57469740f0>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: <object object at 0x7f574c2b84e0>
                argname: file
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x7f574790fa58>
                val: myTools.pdfbourso.pdfbourso.pdfbourso
                argname: importer
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_account[file0-importer0]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __dict__
            obj: <attribute '__dict__' of 'ImporterTestBase' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __weakref__
            obj: <attribute '__weakref__' of 'ImporterTestBase' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __init__
            obj: <slot wrapper '__init__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __new__
            obj: <built-in method __new__ of type object at 0x7f574d6cd880>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __dir__
            obj: <method '__dir__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Instance ()>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pdfbourso/pdfbourso_test.py::TestImporter' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_identify[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_identify[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_date[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_date[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_name[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_name[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_account[file0-importer0]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_account[file0-importer0]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pdfbourso/pdfbourso_test.py::TestImporter' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pdfbourso/pdfbourso_test.py::TestImporter' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pdfbourso/pdfbourso_test.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pdfbourso/__init__.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f574790fa58>
          items: [<Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f574790fa58>
            startdir: /myData/myTools
            items: [<Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>, <Function test_identify[file0-importer0]>, <Function test_extract[file0-importer0]>, <Function test_file_date[file0-importer0]>, <Function test_file_name[file0-importer0]>, <Function test_file_account[file0-importer0]>] [hook]
    pytest_runtestloop [hook]
        session: <Session myTools exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=20>
      pytest_runtest_protocol [hook]
          item: <Function test_identify[file0-importer0]>
          nextitem: <Function test_extract[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_identify[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 115, 'TestImporter.test_identify[file0-importer0]')
        early skip of rewriting module: py._io.capture [assertion]
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_identify[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_identify[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_identify at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:115>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_identify[file0-importer0]>
            nextitem: <Function test_extract[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_identify[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_identify[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 115, 'TestImporter.test_identify[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract[file0-importer0]>
          nextitem: <Function test_file_date[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_extract[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 124, 'TestImporter.test_extract[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_extract[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_extract at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:124>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract[file0-importer0]>
            nextitem: <Function test_file_date[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_extract[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 124, 'TestImporter.test_extract[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_date[file0-importer0]>
          nextitem: <Function test_file_name[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_file_date[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 133, 'TestImporter.test_file_date[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_date[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_date[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_date at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:133>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_date[file0-importer0]>
            nextitem: <Function test_file_name[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_date[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_file_date[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 133, 'TestImporter.test_file_date[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_name[file0-importer0]>
          nextitem: <Function test_file_account[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_file_name[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 140, 'TestImporter.test_file_name[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_name[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_name[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_name at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:140>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_name[file0-importer0]>
            nextitem: <Function test_file_account[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_name[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_file_name[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 140, 'TestImporter.test_file_name[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_account[file0-importer0]>
          nextitem: <Function test_identify[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_file_account[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 146, 'TestImporter.test_file_account[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_account[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_account[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_account at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:146>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_account[file0-importer0]>
            nextitem: <Function test_identify[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_account[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'QIF/ImporterQIF_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: QIF/ImporterQIF_test.py::TestImporter::test_file_account[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 146, 'TestImporter.test_file_account[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_identify[file0-importer0]>
          nextitem: <Function test_extract[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_identify[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 115, 'TestImporter.test_identify[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_identify[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_identify[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_identify at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:115>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_identify[file0-importer0]>
            nextitem: <Function test_extract[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_identify[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_identify[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 115, 'TestImporter.test_identify[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract[file0-importer0]>
          nextitem: <Function test_file_date[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_extract[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 124, 'TestImporter.test_extract[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_extract[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_extract at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:124>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract[file0-importer0]>
            nextitem: <Function test_file_date[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_extract[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 124, 'TestImporter.test_extract[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_date[file0-importer0]>
          nextitem: <Function test_file_name[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_file_date[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 133, 'TestImporter.test_file_date[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_date[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_date[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_date at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:133>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_date[file0-importer0]>
            nextitem: <Function test_file_name[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_date[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_file_date[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 133, 'TestImporter.test_file_date[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_name[file0-importer0]>
          nextitem: <Function test_file_account[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_file_name[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 140, 'TestImporter.test_file_name[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_name[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_name[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_name at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:140>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_name[file0-importer0]>
            nextitem: <Function test_file_account[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_name[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_file_name[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 140, 'TestImporter.test_file_name[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_account[file0-importer0]>
          nextitem: <Function test_identify[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_file_account[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 146, 'TestImporter.test_file_account[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_account[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_account[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_account at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:146>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_account[file0-importer0]>
            nextitem: <Function test_identify[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_account[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'jsongenerali/jsongenerali_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: jsongenerali/jsongenerali_test.py::TestImporter::test_file_account[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 146, 'TestImporter.test_file_account[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_identify[file0-importer0]>
          nextitem: <Function test_extract[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_identify[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 115, 'TestImporter.test_identify[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_identify[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_identify[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_identify at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:115>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_identify[file0-importer0]>
            nextitem: <Function test_extract[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_identify[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_identify[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 115, 'TestImporter.test_identify[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract[file0-importer0]>
          nextitem: <Function test_file_date[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_extract[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 124, 'TestImporter.test_extract[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_extract[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_extract at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:124>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract[file0-importer0]>
            nextitem: <Function test_file_date[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_extract[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 124, 'TestImporter.test_extract[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_date[file0-importer0]>
          nextitem: <Function test_file_name[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_file_date[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 133, 'TestImporter.test_file_date[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_date[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_date[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_date at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:133>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_date[file0-importer0]>
            nextitem: <Function test_file_name[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_date[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_file_date[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 133, 'TestImporter.test_file_date[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_name[file0-importer0]>
          nextitem: <Function test_file_account[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_file_name[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 140, 'TestImporter.test_file_name[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_name[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_name[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_name at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:140>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_name[file0-importer0]>
            nextitem: <Function test_file_account[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_name[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_file_name[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 140, 'TestImporter.test_file_name[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_account[file0-importer0]>
          nextitem: <Function test_identify[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_file_account[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 146, 'TestImporter.test_file_account[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_account[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_account[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_account at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:146>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_account[file0-importer0]>
            nextitem: <Function test_identify[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_account[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfamex/pdfamex_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfamex/pdfamex_test.py::TestImporter::test_file_account[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 146, 'TestImporter.test_file_account[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_identify[file0-importer0]>
          nextitem: <Function test_extract[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_identify[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 115, 'TestImporter.test_identify[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_identify[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_identify[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_identify at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:115>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_identify[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_identify[file0-importer0]>
            nextitem: <Function test_extract[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_identify[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_identify[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_identify[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 115, 'TestImporter.test_identify[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract[file0-importer0]>
          nextitem: <Function test_file_date[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_extract[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 124, 'TestImporter.test_extract[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_extract[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_extract at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:124>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_extract[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract[file0-importer0]>
            nextitem: <Function test_file_date[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_extract[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_extract[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 124, 'TestImporter.test_extract[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_date[file0-importer0]>
          nextitem: <Function test_file_name[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_file_date[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 133, 'TestImporter.test_file_date[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_date[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_date[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_date at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:133>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_date[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_date[file0-importer0]>
            nextitem: <Function test_file_name[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_date[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_date[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_file_date[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 133, 'TestImporter.test_file_date[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_name[file0-importer0]>
          nextitem: <Function test_file_account[file0-importer0]>
        pytest_runtest_logstart [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_file_name[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 140, 'TestImporter.test_file_name[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_name[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_name[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_name at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:140>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_name[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_name[file0-importer0]>
            nextitem: <Function test_file_account[file0-importer0]>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_name[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_name[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_file_name[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 140, 'TestImporter.test_file_name[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_account[file0-importer0]>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_file_account[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 146, 'TestImporter.test_file_account[file0-importer0]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_account[file0-importer0]>
        pytest_runtest_makereport [hook]
            item: <Function test_file_account[file0-importer0]>
            call: <CallInfo when='setup' exception: got empty parameter set ['file'], function test_file_account at /usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py:146>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_account[file0-importer0]' when='setup' outcome='skipped'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('skipped', 's', 'SKIPPED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_account[file0-importer0]>
            nextitem: None
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_account[file0-importer0]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'pdfbourso/pdfbourso_test.py::TestImporter::test_file_account[file0-importer0]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f574790fa58>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: pdfbourso/pdfbourso_test.py::TestImporter::test_file_account[file0-importer0]
            location: ('../../usr/local/lib/python3.7/site-packages/beancount/ingest/regression_pytest.py', 146, 'TestImporter.test_file_account[file0-importer0]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session myTools exitstatus=0 testsfailed=0 testscollected=20>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f5746ddf4e0>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x7f574790fa58>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f574790fa58>
    finish pytest_unconfigure --> [] [hook]
